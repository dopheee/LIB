# CMD 指令分发模块

`cmd.c` 和 `cmd.h` 提供了一个简单高效的串口/流式指令分发与回调注册机制，适用于嵌入式系统、MCU、单片机等场景。

---

## 功能简介

- **指令注册**：支持注册多组指令前缀、后缀及对应回调。
- **指令解析**：自动识别起始和结束字符，提取指令内容。
- **回调分发**：收到完整指令后自动调用对应回调。
- **可配置**：支持自定义起始/结束字符。

---

## 主要接口

| 函数名                | 说明                 |
|----------------------|----------------------|
| `cmd_register`       | 注册指令及回调       |
| `cmd_system_init`    | 初始化起止字符       |
| `cmd_dispatcher_input` | 输入单个字符进行解析 |

---

## 头文件示例（cmd.h）
```c
#ifndef CMD_H
#define CMD_H

#include <stddef.h>

typedef void (*cmd_callback_t)(const char *payload, size_t len);

typedef struct {
    const char *prefix;
    const char *suffix;
    cmd_callback_t callback;
} cmd_entry_t;

void cmd_register(const char *prefix, const char *suffix, cmd_callback_t cb);
void cmd_system_init(const char *start, const char *end);
void cmd_dispatcher_input(char c);

#endif // CMD_H
```

---

## 使用示例

```c
#include "cmd.h"
#include <stdio.h>

void my_cmd_cb(const char *payload, size_t len) {
    printf("收到指令内容: %.*s\n", (int)len, payload);
}

int main() {
    // 初始化，设置起始为'$'，结束为'!'
    cmd_system_init("$", "!");
    // 注册指令，前缀"LED", 后缀"ON"
    cmd_register("LED", "ON", my_cmd_cb);

    // 模拟输入: $LED123ON!
    const char *test = "$LED123ON!";
    for (const char *p = test; *p; ++p) {
        cmd_dispatcher_input(*p);
    }
    return 0;
}
```

**输出：**
```
收到指令内容: 123
```

---

## 典型应用场景
- 串口命令解析
- 流式数据协议分发
- 嵌入式设备远程控制

---

## 备注
- 最大支持 8 组指令（可通过 `CMD_MAX_ENTRIES` 修改）。
- 指令缓冲区默认 128 字节（`CMD_BUF_SIZE`）。
- 支持多字符起始/结束符。
